Comparers
=========

``calcpy`` provides comparers to compare objects. The comparers support an arbitrary number of operands. It also has a keyword parameter ``key`` to customize the comparison.

Experimental functionarity: The APIs provide the ``Matcher`` class to customize the tests for equality. They can be used in the keyword parameter ``key`` of many relevant functions.

--------------------
Inequality Comparers
--------------------

.. autofunction:: calcpy.lt
.. autofunction:: calcpy.le
.. autofunction:: calcpy.ge
.. autofunction:: calcpy.gt

------------------
Equality Comparers
------------------

.. autofunction:: calcpy.eq
.. autofunction:: calcpy.ne

.. autofunction:: calcpy.same
.. autofunction:: calcpy.distinct
.. autofunction:: calcpy.unique
.. autofunction:: calcpy.count_unique

-----------------------
Convert among Comparers
-----------------------

We also provide some functions to convert comparers to each other.

.. autofunction:: calcpy.lt_to_key
.. autofunction:: calcpy.le_to_key
.. autofunction:: calcpy.gt_to_key
.. autofunction:: calcpy.ge_to_key
.. autofunction:: calcpy.cmp_to_key

.. autofunction:: calcpy.key_to_eq
.. autofunction:: calcpy.key_to_ne
.. autofunction:: calcpy.key_to_lt
.. autofunction:: calcpy.key_to_le
.. autofunction:: calcpy.key_to_gt
.. autofunction:: calcpy.key_to_ge
    
.. autofunction:: calcpy.lt_to_cmp
.. autofunction:: calcpy.le_to_cmp
.. autofunction:: calcpy.ge_to_cmp
.. autofunction:: calcpy.gt_to_cmp

.. autofunction:: calcpy.cmp_to_eq
.. autofunction:: calcpy.cmp_to_ne
.. autofunction:: calcpy.cmp_to_lt
.. autofunction:: calcpy.cmp_to_le
.. autofunction:: calcpy.cmp_to_gt
.. autofunction:: calcpy.cmp_to_ge

.. _matcher:

----------------------
Matcher (Experimental)
----------------------

The `matcher` parameter is used to customize the comparison function.

We provide some binary functions to check the equality of two objects. Especially, :py:func:`calcpy.overall_equal` compares two objects as a whole. It behaves like ``np.array_equal()`` for ``np.ndarray``, and behaves like ``loper.equals(roper)`` for ``pd.Series`` and ``pd.DataFrame``.

We also provide a class ``calcpy.matcher.PandasFrameMatcher`` for comparing ``pd.DataFrame``'s.

.. autoclass:: calcpy.matcher.PandasFrameMatcher

Different ways to instantiate the ``PandasFrameMatcher`` class:

- ``calcpy.matcher.PandasFrameMatcher()``: Compare whether pandas objects as a whole. It has the same effect as ``calcpy.overall_equal()``.

- ``calcpy.matcher.PandasFrameMatcher("index")``: Compare index values of pandas objects.

- ``calcpy.matcher.PandasFrameMatcher("values")``: Compare values of pandas objects, ignoring the index values.

- ``calcpy.matcher.PandasFrameMatcher("series")``: Compare ``pd.DataFrame`` in a ``pd.Series`` way. By default, it is ``left_series.equals(right_series)``.

For ``pd.DataFrame``, it also provides a keyword parameter ``axis``. It compares each row when it is set to 0 (the default value) or ``index``, and compares each column if ``axis`` is set to 1 or ``column``.
